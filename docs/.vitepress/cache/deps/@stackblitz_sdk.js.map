{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@stackblitz+sdk@1.8.2/node_modules/@stackblitz/sdk/src/constants.ts", "../../../../node_modules/.pnpm/@stackblitz+sdk@1.8.2/node_modules/@stackblitz/sdk/src/params.ts", "../../../../node_modules/.pnpm/@stackblitz+sdk@1.8.2/node_modules/@stackblitz/sdk/src/helpers.ts", "../../../../node_modules/.pnpm/@stackblitz+sdk@1.8.2/node_modules/@stackblitz/sdk/src/rdc.ts", "../../../../node_modules/.pnpm/@stackblitz+sdk@1.8.2/node_modules/@stackblitz/sdk/src/vm.ts", "../../../../node_modules/.pnpm/@stackblitz+sdk@1.8.2/node_modules/@stackblitz/sdk/src/connection.ts", "../../../../node_modules/.pnpm/@stackblitz+sdk@1.8.2/node_modules/@stackblitz/sdk/src/generate.ts", "../../../../node_modules/.pnpm/@stackblitz+sdk@1.8.2/node_modules/@stackblitz/sdk/src/lib.ts", "../../../../node_modules/.pnpm/@stackblitz+sdk@1.8.2/node_modules/@stackblitz/sdk/src/index.ts"],
  "sourcesContent": ["/**\n * Number of milliseconds between attempts to get a response from an embedded frame\n */\nexport const CONNECT_INTERVAL = 500;\n\n/**\n * How many times should we try to get an init response from an embedded frame\n */\nexport const CONNECT_MAX_ATTEMPTS = 20;\n\n/**\n * Default height attribute for iframes\n */\nexport const DEFAULT_FRAME_HEIGHT = 300;\n\n/**\n * Origin of the StackBlitz instance\n */\nexport const DEFAULT_ORIGIN = 'https://stackblitz.com';\n\n/**\n * List of supported template names.\n */\nexport const PROJECT_TEMPLATES = [\n  'angular-cli',\n  'create-react-app',\n  'html',\n  'javascript',\n  'node',\n  'polymer',\n  'typescript',\n  'vue',\n] as const;\n", "import type { EmbedOptions, OpenOptions } from './interfaces';\n\ntype Options = Omit<OpenOptions & EmbedOptions, 'origin' | 'newWindow' | 'height' | 'width'>;\n\nconst generators: Record<keyof Options, (value: any) => string> = {\n  clickToLoad: (value: Options['clickToLoad']) => trueParam('ctl', value),\n  devToolsHeight: (value: Options['devToolsHeight']) => percentParam('devtoolsheight', value),\n  forceEmbedLayout: (value: Options['forceEmbedLayout']) => trueParam('embed', value),\n  hideDevTools: (value: Options['hideDevTools']) => trueParam('hidedevtools', value),\n  hideExplorer: (value: Options['hideExplorer']) => trueParam('hideExplorer', value),\n  hideNavigation: (value: Options['hideNavigation']) => trueParam('hideNavigation', value),\n  showSidebar: (value: Options['showSidebar']) => booleanParam('showSidebar', value),\n  openFile: (value: Options['openFile']) => stringParams('file', value).join('&'),\n  terminalHeight: (value: Options['terminalHeight']) => percentParam('terminalHeight', value),\n  theme: (value: Options['theme']) => enumParam('theme', ['light', 'dark'], value),\n  view: (value: Options['view']) => enumParam('view', ['preview', 'editor'], value),\n};\n\nexport function buildParams(options: Options = {}): string {\n  const params: string[] = Object.entries(options)\n    .map(([key, value]) => {\n      if (value != null && generators.hasOwnProperty(key)) {\n        return generators[key as keyof Options](value);\n      }\n      return '';\n    })\n    .filter(Boolean);\n\n  return params.length ? `?${params.join('&')}` : '';\n}\n\nfunction trueParam(name: string, value?: boolean): string {\n  if (value === true) {\n    return `${name}=1`;\n  }\n  return '';\n}\n\nfunction booleanParam(name: string, value?: boolean): string {\n  if (typeof value === 'boolean') {\n    return `${name}=${value ? '1' : '0'}`;\n  }\n  return '';\n}\n\nfunction percentParam(name: string, value?: number): string {\n  if (typeof value === 'number' && value >= 0 && value <= 100) {\n    return `${name}=${Math.round(value)}`;\n  }\n  return '';\n}\n\nfunction enumParam(name: string, oneOf: string[], value?: string) {\n  if (typeof value === 'string' && oneOf.includes(value)) {\n    return `${name}=${value}`;\n  }\n  return '';\n}\n\nfunction stringParams(name: string, value?: string | string[]): string[] {\n  const values = Array.isArray(value) ? value : [value];\n  return values\n    .filter((val) => typeof val === 'string' && val.trim() !== '')\n    .map((val: string) => `${name}=${encodeURIComponent(val.trim())}`);\n}\n", "import type { EmbedOptions, OpenOptions } from './interfaces';\nimport { DEFAULT_FRAME_HEIGHT, DEFAULT_ORIGIN } from './constants';\nimport { buildParams } from './params';\n\n/**\n * Pseudo-random id string for internal accounting.\n * 8 characters long, and collisions around 1 per million.\n */\nexport function genID() {\n  return Math.random().toString(36).slice(2, 6) + Math.random().toString(36).slice(2, 6);\n}\n\nexport function openUrl(route: string, options?: OpenOptions) {\n  return `${getOrigin(options)}${route}${buildParams(options)}`;\n}\n\nexport function embedUrl(route: string, options?: EmbedOptions) {\n  const config: EmbedOptions = {\n    forceEmbedLayout: true,\n  };\n  if (options && typeof options === 'object') {\n    Object.assign(config, options);\n  }\n  return `${getOrigin(config)}${route}${buildParams(config)}`;\n}\n\nfunction getOrigin(options: OpenOptions & EmbedOptions = {}) {\n  if (typeof options.origin === 'string') {\n    return options.origin;\n  }\n  return DEFAULT_ORIGIN;\n}\n\nexport function replaceAndEmbed(\n  parent: HTMLElement,\n  frame: HTMLIFrameElement,\n  options?: EmbedOptions\n) {\n  if (!frame || !parent || !parent.parentNode) {\n    throw new Error('Invalid Element');\n  }\n  if (parent.id) frame.id = parent.id;\n  if (parent.className) frame.className = parent.className;\n  setFrameDimensions(frame, options);\n  parent.parentNode.replaceChild(frame, parent);\n}\n\nexport function findElement(elementOrId: string | HTMLElement) {\n  if (typeof elementOrId === 'string') {\n    const element = document.getElementById(elementOrId);\n    if (!element) {\n      throw new Error(`Could not find element with id '${elementOrId}'`);\n    }\n    return element;\n  } else if (elementOrId instanceof HTMLElement) {\n    return elementOrId;\n  }\n  throw new Error(`Invalid element: ${elementOrId}`);\n}\n\nexport function openTarget(options?: OpenOptions) {\n  return options && options.newWindow === false ? '_self' : '_blank';\n}\n\nfunction setFrameDimensions(frame: HTMLIFrameElement, options?: EmbedOptions) {\n  if (options && typeof options === 'object') {\n    if (Object.hasOwnProperty.call(options, 'height')) {\n      frame.height = `${options.height}`;\n    }\n    if (Object.hasOwnProperty.call(options, 'width')) {\n      frame.width = `${options.width}`;\n    }\n  }\n\n  if (!frame.height) {\n    frame.height = `${DEFAULT_FRAME_HEIGHT}`;\n  }\n  if (!frame.width) {\n    frame.setAttribute('style', 'width:100%;');\n  }\n}\n", "import { genID } from './helpers';\n\ninterface MessageData {\n  type: string;\n  payload: MessagePayload;\n}\n\ninterface MessagePayload {\n  __reqid: string;\n  __success: boolean;\n  __error?: string;\n  [key: string]: any;\n}\n\ninterface RequestData {\n  type: string;\n  payload: { [key: string]: any };\n}\n\ninterface PendingResolvers {\n  [id: string]: {\n    resolve(value: { [key: string]: any } | null): void;\n    reject(error: string): void;\n  };\n}\n\nexport class RDC {\n  private port: MessagePort;\n  private pending: PendingResolvers = {};\n\n  constructor(port: MessagePort) {\n    this.port = port;\n    this.port.onmessage = this.messageListener.bind(this);\n  }\n\n  public request<T = null>({ type, payload }: RequestData): Promise<T | null> {\n    // Generate request ID\n    const id = genID();\n    return new Promise((resolve, reject) => {\n      this.pending[id] = { resolve, reject };\n      this.port.postMessage({\n        type,\n        payload: {\n          ...payload,\n          // Ensure the payload object includes the request ID\n          __reqid: id,\n        },\n      });\n    });\n  }\n\n  private messageListener(event: MessageEvent<MessageData>) {\n    if (typeof event.data.payload?.__reqid !== 'string') {\n      return;\n    }\n\n    const { type, payload } = event.data;\n    const { __reqid: id, __success: success, __error: error } = payload;\n\n    if (this.pending[id]) {\n      if (success) {\n        this.pending[id].resolve(cleanResult(payload));\n      } else {\n        this.pending[id].reject(error ? `${type}: ${error}` : type);\n      }\n      delete this.pending[id];\n    }\n  }\n}\n\nfunction cleanResult(payload: MessagePayload): { [key: string]: any } | null {\n  const result: Partial<typeof payload> = { ...payload };\n  delete result.__reqid;\n  delete result.__success;\n  delete result.__error;\n  // Null the result if payload was empty besides the private metadata fields\n  return Object.keys(result).length ? result : null;\n}\n", "import type {\n  OpenFileOption,\n  ProjectDependencies,\n  ProjectFiles,\n  UiThemeOption,\n  UiViewOption,\n} from './interfaces';\nimport { RDC } from './rdc';\n\nexport interface FsDiff {\n  create: {\n    [path: string]: string;\n  };\n  destroy: string[];\n}\n\nexport class VM {\n  private _rdc: RDC;\n\n  constructor(port: MessagePort, config: { previewOrigin?: string }) {\n    this._rdc = new RDC(port);\n\n    Object.defineProperty(this.preview, 'origin', {\n      value: typeof config.previewOrigin === 'string' ? config.previewOrigin : null,\n      writable: false,\n    });\n  }\n\n  /**\n   * Apply batch updates to the project files in one call.\n   */\n  applyFsDiff(diff: FsDiff): Promise<null> {\n    const isObject = (val: any) => val !== null && typeof val === 'object';\n    if (!isObject(diff) || !isObject(diff.create)) {\n      throw new Error('Invalid diff object: expected diff.create to be an object.');\n    } else if (!Array.isArray(diff.destroy)) {\n      throw new Error('Invalid diff object: expected diff.create to be an array.');\n    }\n\n    return this._rdc.request({\n      type: 'SDK_APPLY_FS_DIFF',\n      payload: diff,\n    });\n  }\n\n  /**\n   * Get the projectâ€™s defined dependencies.\n   *\n   * In EngineBlock projects, version numbers represent the resolved dependency versions.\n   * In WebContainers-based projects, returns data from the projectâ€™s `package.json` without resolving installed version numbers.\n   */\n  getDependencies(): Promise<ProjectDependencies | null> {\n    return this._rdc.request({\n      type: 'SDK_GET_DEPS_SNAPSHOT',\n      payload: {},\n    });\n  }\n\n  /**\n   * Get a snapshot of the project files and their content.\n   */\n  getFsSnapshot(): Promise<ProjectFiles | null> {\n    return this._rdc.request<{ [path: string]: string }>({\n      type: 'SDK_GET_FS_SNAPSHOT',\n      payload: {},\n    });\n  }\n\n  public editor = {\n    /**\n     * Open one of several files in tabs and/or split panes.\n     *\n     * @since 1.7.0 Added support for opening multiple files\n     */\n    openFile: (path: OpenFileOption): Promise<null> => {\n      return this._rdc.request({\n        type: 'SDK_OPEN_FILE',\n        payload: { path },\n      });\n    },\n\n    /**\n     * Set a project file as the currently selected file.\n     * \n     * - This may update the highlighted file in the file explorer,\n     *   and the currently open and/or focused editor tab.\n     * - It will _not_ open a new editor tab if the provided path does not\n     *   match a currently open tab. See `vm.editor.openFile` to open files.\n     *\n     * @since 1.7.0\n     * @experimental\n     */\n    setCurrentFile: (path: string): Promise<null> => {\n      return this._rdc.request({\n        type: 'SDK_SET_CURRENT_FILE',\n        payload: { path },\n      });\n    },\n\n    /**\n     * Change the color theme\n     *\n     * @since 1.7.0\n     */\n    setTheme: (theme: UiThemeOption): Promise<null> => {\n      return this._rdc.request({\n        type: 'SDK_SET_UI_THEME',\n        payload: { theme },\n      });\n    },\n\n    /**\n     * Change the display mode of the project:\n     *\n     * - `default`: show the editor and preview pane\n     * - `editor`: show the editor pane only\n     * - `preview`: show the preview pane only\n     *\n     * @since 1.7.0\n     */\n    setView: (view: UiViewOption): Promise<null> => {\n      return this._rdc.request({\n        type: 'SDK_SET_UI_VIEW',\n        payload: { view },\n      });\n    },\n\n    /**\n     * Change the display mode of the sidebar:\n     *\n     * - `true`: show the sidebar\n     * - `false`: hide the sidebar\n     *\n     * @since 1.7.0\n     */\n    showSidebar: (visible: boolean = true): Promise<null> => {\n      return this._rdc.request({\n        type: 'SDK_TOGGLE_SIDEBAR',\n        payload: { visible },\n      });\n    },\n  };\n\n  public preview = {\n    /**\n     * The origin (protocol and domain) of the preview iframe.\n     *\n     * In WebContainers-based projects, the origin will always be `null`;\n     * try using `vm.preview.getUrl` instead.\n     *\n     * @see https://developer.stackblitz.com/docs/platform/available-environments\n     */\n    origin: '' as string | null,\n\n    /**\n     * Get the current preview URL.\n     *\n     * In both and EngineBlock and WebContainers-based projects, the preview URL\n     * may not reflect the exact path of the current page, after user navigation.\n     *\n     * In WebContainers-based projects, the preview URL will be `null` initially,\n     * and until the project starts a web server.\n     *\n     * @since 1.7.0\n     * @experimental\n     */\n    getUrl: (): Promise<string | null> => {\n      return this._rdc\n        .request<{ url: string } | null>({\n          type: 'SDK_GET_PREVIEW_URL',\n          payload: {},\n        })\n        .then((data) => data?.url ?? null);\n    },\n\n    /**\n     * Change the path of the preview URL.\n     *\n     * In WebContainers-based projects, this will be ignored if there is no\n     * currently running web server.\n     *\n     * @since 1.7.0\n     * @experimental\n     */\n    setUrl: (path: string = '/'): Promise<null> => {\n      if (typeof path !== 'string' || !path.startsWith('/')) {\n        throw new Error(`Invalid argument: expected a path starting with '/', got '${path}'`);\n      }\n      return this._rdc.request<null>({\n        type: 'SDK_SET_PREVIEW_URL',\n        payload: { path },\n      });\n    },\n  };\n}\n", "import { CONNECT_INTERVAL, CONNECT_MAX_ATTEMPTS } from './constants';\nimport { genID } from './helpers';\nimport { VM } from './vm';\n\nconst connections: Connection[] = [];\n\nexport class Connection {\n  element: HTMLIFrameElement;\n  id: string;\n  pending: Promise<VM>;\n  vm: VM;\n\n  constructor(element: HTMLIFrameElement) {\n    this.id = genID();\n    this.element = element;\n    this.pending = new Promise<VM>((resolve, reject) => {\n      const listenForSuccess = ({ data, ports }: MessageEvent) => {\n        if (data?.action === 'SDK_INIT_SUCCESS' && data.id === this.id) {\n          this.vm = new VM(ports[0], data.payload);\n          resolve(this.vm);\n          cleanup();\n        }\n      };\n\n      const pingFrame = () => {\n        this.element.contentWindow?.postMessage(\n          {\n            action: 'SDK_INIT',\n            id: this.id,\n          },\n          '*'\n        );\n      };\n\n      // Remove the listener and interval.\n      function cleanup() {\n        window.clearInterval(interval);\n        window.removeEventListener('message', listenForSuccess);\n      }\n\n      // First we want to set up the listener for the frame\n      window.addEventListener('message', listenForSuccess);\n      // Then, lets immediately ping the frame.\n      pingFrame();\n      // Keep track of the current try number\n      let attempts = 0;\n      const interval = window.setInterval(() => {\n        // If the VM connection is open, cleanup and return\n        // This shouldn't ever happen, but just in case there's some race condition...\n        if (!!this.vm) {\n          cleanup();\n          return;\n        }\n\n        // If we've exceeded the max retries, fail this promise.\n        if (attempts >= CONNECT_MAX_ATTEMPTS) {\n          cleanup();\n          reject('Timeout: Unable to establish a connection with the StackBlitz VM');\n          // Remove the (now) failed connection from the connections array\n          connections.forEach((connection, index) => {\n            if (connection.id === this.id) {\n              connections.splice(index, 1);\n            }\n          });\n          return;\n        }\n\n        attempts++;\n        pingFrame();\n      }, CONNECT_INTERVAL);\n    });\n\n    connections.push(this);\n  }\n}\n\n// Accepts either the frame element OR the id.\nexport const getConnection = (identifier: string | HTMLIFrameElement) => {\n  const key = identifier instanceof Element ? 'element' : 'id';\n  return connections.find((c) => c[key] === identifier) ?? null;\n};\n", "import type { Project, EmbedOptions, OpenOptions } from './interfaces';\nimport { PROJECT_TEMPLATES } from './constants';\nimport { embedUrl, openTarget, openUrl } from './helpers';\n\nfunction createHiddenInput(name: string, value: string) {\n  const input = document.createElement('input');\n  input.type = 'hidden';\n  input.name = name;\n  input.value = value;\n  return input;\n}\n\n/**\n * Encode file paths for use in input name attributes.\n * We need to replace square brackets (as used by Next.js, SvelteKit, etc.),\n * with custom escape sequences. Important: do not encodeURIComponent the\n * whole path, for compatibility with the StackBlitz backend.\n */\nfunction bracketedFilePath(path: string) {\n  return `[${path.replace(/\\[/g, '%5B').replace(/\\]/g, '%5D')}]`;\n}\n\nfunction createProjectForm(project: Project) {\n  if (!PROJECT_TEMPLATES.includes(project.template)) {\n    const names = PROJECT_TEMPLATES.map((t) => `'${t}'`).join(', ');\n    console.warn(`Unsupported project.template: must be one of ${names}`);\n  }\n\n  const isWebContainers = project.template === 'node';\n\n  const form = document.createElement('form');\n  form.method = 'POST';\n  form.setAttribute('style', 'display:none!important;');\n\n  form.appendChild(createHiddenInput('project[title]', project.title));\n  form.appendChild(createHiddenInput('project[description]', project.description));\n  form.appendChild(createHiddenInput('project[template]', project.template));\n\n  if (project.dependencies) {\n    if (isWebContainers) {\n      console.warn(\n        `Invalid project.dependencies: dependencies must be provided as a 'package.json' file when using the 'node' template.`\n      );\n    } else {\n      form.appendChild(\n        createHiddenInput('project[dependencies]', JSON.stringify(project.dependencies))\n      );\n    }\n  }\n\n  if (project.settings) {\n    form.appendChild(createHiddenInput('project[settings]', JSON.stringify(project.settings)));\n  }\n\n  Object.keys(project.files).forEach((path) => {\n    const name = 'project[files]' + bracketedFilePath(path);\n    const value = project.files[path];\n    if (typeof value === 'string') {\n      form.appendChild(createHiddenInput(name, value));\n    }\n  });\n\n  return form;\n}\n\nexport function createProjectFrameHTML(project: Project, options?: EmbedOptions) {\n  const form = createProjectForm(project);\n  form.action = embedUrl('/run', options);\n  form.id = 'sb';\n\n  const html = `<html><head><title></title></head><body>${form.outerHTML}<script>document.getElementById('${form.id}').submit();</script></body></html>`;\n\n  return html;\n}\n\nexport function openNewProject(project: Project, options?: OpenOptions) {\n  const form = createProjectForm(project);\n  form.action = openUrl('/run', options);\n  form.target = openTarget(options);\n\n  document.body.appendChild(form);\n  form.submit();\n  document.body.removeChild(form);\n}\n", "import type { Project, OpenOptions, EmbedOptions } from './interfaces';\nimport type { VM } from './vm';\nimport { Connection, getConnection } from './connection';\nimport { openNewProject, createProjectFrameHTML } from './generate';\nimport { embedUrl, findElement, openTarget, openUrl, replaceAndEmbed } from './helpers';\n\n/**\n * Get a VM instance for an existing StackBlitz project iframe.\n */\nexport function connect(frameEl: HTMLIFrameElement): Promise<VM> {\n  if (!frameEl?.contentWindow) {\n    return Promise.reject('Provided element is not an iframe.');\n  }\n  const connection = getConnection(frameEl) ?? new Connection(frameEl);\n  return connection.pending;\n}\n\n/**\n * Open an existing StackBlitz project in a new tab (or in the current window).\n */\nexport function openProject(project: Project, options?: OpenOptions) {\n  openNewProject(project, options);\n}\n\n/**\n * Open an existing StackBlitz project in a new tab (or in the current window).\n */\nexport function openProjectId(projectId: string, options?: OpenOptions) {\n  const url = openUrl(`/edit/${projectId}`, options);\n  const target = openTarget(options);\n  window.open(url, target);\n}\n\n/**\n * Open a project from Github and open it in a new tab (or in the current window).\n *\n * Example usage:\n *\n *     sdk.openGithubProject('some/repository');\n *     sdk.openGithubProject('some/repository/tree/some-branch');\n */\nexport function openGithubProject(repoSlug: string, options?: OpenOptions) {\n  const url = openUrl(`/github/${repoSlug}`, options);\n  const target = openTarget(options);\n  window.open(url, target);\n}\n\n/**\n * Create a new project and embed it on the current page.\n *\n * Returns a promise resolving to a VM instance.\n */\nexport function embedProject(\n  elementOrId: string | HTMLElement,\n  project: Project,\n  options?: EmbedOptions\n): Promise<VM> {\n  const element = findElement(elementOrId);\n  const html = createProjectFrameHTML(project, options);\n  const frame = document.createElement('iframe');\n\n  replaceAndEmbed(element, frame, options);\n\n  // HTML needs to be written after iframe is embedded\n  frame.contentDocument?.write(html);\n\n  return connect(frame);\n}\n\n/**\n * Embeds an existing StackBlitz project on the current page.\n *\n * Returns a promise resolving to a VM instance.\n */\nexport function embedProjectId(\n  elementOrId: string | HTMLElement,\n  projectId: string,\n  options?: EmbedOptions\n): Promise<VM> {\n  const element = findElement(elementOrId);\n  const frame = document.createElement('iframe');\n  frame.src = embedUrl(`/edit/${projectId}`, options);\n\n  replaceAndEmbed(element, frame, options);\n\n  return connect(frame);\n}\n\n/**\n * Embeds a project from Github on the current page.\n *\n * Returns a promise resolving to a VM instance.\n */\nexport function embedGithubProject(\n  elementOrId: string | HTMLElement,\n  repoSlug: string,\n  options?: EmbedOptions\n): Promise<VM> {\n  const element = findElement(elementOrId);\n  const frame = document.createElement('iframe');\n  frame.src = embedUrl(`/github/${repoSlug}`, options);\n\n  replaceAndEmbed(element, frame, options);\n\n  return connect(frame);\n}\n", "import {\n  connect,\n  embedGithubProject,\n  embedProject,\n  embedProjectId,\n  openGithubProject,\n  openProject,\n  openProjectId,\n} from './lib';\n\n// Explicitly export public types (vs using `export * from './interfaces'`),\n// so that additions to interfaces don't become a part of our public API by mistake.\nexport type {\n  Project,\n  ProjectOptions,\n  ProjectDependencies,\n  ProjectFiles,\n  ProjectSettings,\n  ProjectTemplate,\n  EmbedOptions,\n  OpenOptions,\n  OpenFileOption,\n  UiThemeOption,\n  UiViewOption,\n} from './interfaces';\nexport type { FsDiff, VM } from './vm';\n\n// Export a single object with methods, for compatibility with UMD and CommonJS.\n// Ideally we would also have named exports, but that can create incompatibilities\n// with some bundlers, and microbundle doesn't support it:\n// https://github.com/developit/microbundle/issues/712\nexport default {\n  connect,\n  embedGithubProject,\n  embedProject,\n  embedProjectId,\n  openGithubProject,\n  openProject,\n  openProjectId,\n};\n"],
  "mappings": "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",
  "names": ["PROJECT_TEMPLATES", "generators", "clickToLoad", "value", "trueParam", "devToolsHeight", "percentParam", "forceEmbedLayout", "hideDevTools", "hideExplorer", "hideNavigation", "showSidebar", "booleanParam", "name", "openFile", "stringParams", "Array", "isArray", "filter", "val", "trim", "map", "encodeURIComponent", "join", "terminalHeight", "theme", "enumParam", "view", "buildParams", "options", "params", "Object", "entries", "_ref", "key", "hasOwnProperty", "Boolean", "length", "Math", "round", "oneOf", "includes", "genID", "random", "toString", "slice", "openUrl", "route", "getOrigin", "embedUrl", "config", "assign", "origin", "replaceAndEmbed", "parent", "frame", "parentNode", "Error", "id", "className", "call", "height", "width", "setAttribute", "replaceChild", "findElement", "elementOrId", "element", "document", "getElementById", "HTMLElement", "openTarget", "newWindow", "e", "t", "n", "r", "RDC", "port", "this", "pending", "onmessage", "messageListener", "bind", "_proto", "prototype", "request", "_this", "type", "payload", "Promise", "resolve", "reject", "postMessage", "_extends", "__reqid", "event", "_event$data$payload", "data", "_event$data", "error", "__error", "__success", "result", "keys", "VM", "_rdc", "editor", "path", "setCurrentFile", "setTheme", "setView", "visible", "preview", "getUrl", "then", "_data$url", "url", "setUrl", "startsWith", "defineProperty", "previewOrigin", "writable", "applyFsDiff", "diff", "isObject", "create", "destroy", "getDependencies", "getFsSnapshot", "connections", "Connection", "vm", "listenForSuccess", "action", "ports", "cleanup", "pingFrame", "_this$element$content", "contentWindow", "window", "clearInterval", "interval", "removeEventListener", "addEventListener", "attempts", "setInterval", "forEach", "connection", "index", "splice", "push", "createHiddenInput", "input", "createElement", "createProjectForm", "project", "template", "names", "console", "warn", "isWebContainers", "form", "method", "appendChild", "title", "description", "dependencies", "JSON", "stringify", "settings", "files", "replace", "connect", "frameEl", "identifier", "Element", "getConnection", "find", "c", "_connections$find", "embedGithubProject", "repoSlug", "src", "embedProject", "_frame$contentDocumen", "html", "outerHTML", "contentDocument", "write", "embedProjectId", "projectId", "openGithubProject", "target", "open", "openProject", "openNewProject", "body", "submit", "removeChild", "openProjectId"]
}
